import sys
from pathlib import Path
from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from Crypto.Hash import HMAC, SHA256

# Constants
OUTPUT_DIR = "/home/wole/Documents/research/research"
QRNG_KEY_FILE = "raw_random.bin"
ENCRYPTED_INPUT_FILE = "encrypted_iot_data.bin"
DECRYPTED_OUTPUT_FILE = "decrypted_message.txt"

def load_key(key_path):
    """Load the 256-bit AES key generated by the QRNG"""
    with open(key_path, "rb") as f:
        key = f.read(32)
    if len(key) < 32:
        raise ValueError("Key is too short (expected 256-bit)")
    return key

def verify_hmac(key, iv, ciphertext, hmac_expected):
    """Verify the HMAC signature (SHA256)"""
    h = HMAC.new(key, digestmod=SHA256)
    h.update(iv + ciphertext)
    hmac_calculated = h.digest()
    if hmac_expected != hmac_calculated:
        raise ValueError("❌ HMAC mismatch! Integrity verification failed.")

def decrypt_message(key, iv, ciphertext):
    """Decrypt using AES-CBC"""
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return unpad(cipher.decrypt(ciphertext), AES.block_size)

def main():
    encrypted_file_path = Path(OUTPUT_DIR) / ENCRYPTED_INPUT_FILE
    key_path = Path(OUTPUT_DIR) / QRNG_KEY_FILE

    # Step 1: Load AES key
    key = load_key(key_path)
    print(f"🔑 Loaded 256-bit key from: {key_path}")

    # Step 2: Read encrypted file (IV + HMAC + ciphertext)
    with open(encrypted_file_path, "rb") as f:
        iv = f.read(16)
        hmac_sig = f.read(32)
        ciphertext = f.read()
    print(f"📦 Encrypted file read: IV + HMAC + Ciphertext ({len(ciphertext)} bytes)")

    # Step 3: Verify HMAC
    try:
        verify_hmac(key, iv, ciphertext, hmac_sig)
        print("✅ HMAC verified. Data is intact.")
    except ValueError as e:
        print(str(e))
        sys.exit(1)

    # Step 4: Decrypt
    try:
        plaintext = decrypt_message(key, iv, ciphertext)
        decrypted_file = Path(OUTPUT_DIR) / DECRYPTED_OUTPUT_FILE
        with open(decrypted_file, "wb") as f:
            f.write(plaintext)
        print(f"✅ Decryption successful. Message saved to: {decrypted_file}")
    except Exception as e:
        print(f"❌ Decryption failed: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
